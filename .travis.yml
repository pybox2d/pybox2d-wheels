env:
  global:
    - REPO_DIR=pybox2d
    # Commit from your-project that you want to build
    - BUILD_COMMIT=2.3.10
    # pip dependencies to _build_ your project
    - BUILD_DEPENDS=""
    # pip dependencies to _test_ your project.  Include any dependencies
    # that you need, that are also specified in BUILD_DEPENDS, this will be
    # a separate install.
    - TEST_DEPENDS="pytest"
    - UNICODE_WIDTH=32
    - secure: "AQqNHDjCsrgPktnfWpQ8SdTVHJEApG/nbUzj62rIu1//mGZ8QTPrZsoiPEK9xHEBGLYKQN6DhtXxN3J9CsBopRjHU/MUdv371R0HLyxmfdhZvAlmNoqMHGriXpbSKImwhRIzBaGo5rISWF51tloUyc6isLUbobcnGraTZoTEv67/ETkQ+adkBgJT2pETXNuF5JBnaM92tvktAxaS1tQRlhqdH+6VAQdj6SjlK01iCec6MPjA8yhj4obltVm4Xt9aZcg/CBonYCc5EfJ5AXuE6AkqLYwnUQVhTUi/diO0TgUy3H/07d4h90hGy/LWwbZg6X7OgWSAEoLv3btsrPSQcqXarngt5+btVKvXLpa2JQUeF2gDwpk9d3+DxSOfsW37WPatOnWhZgKNPnOUuoQJ5tvlTagCSWCPUB5CptMZpTqR2PprZrLMyvVViz+ji0kztkLq7KntznUjdV9zaqNO8LfCm2YhXtCZQMAWum/qYMZW1UkKkIRimzaUH0Jzib45IMU6hS9gaXuyOXD3uSlnFBOGSl7YH39auh0JxWp4B+lalg0wtAogZHyPM+8wvFFoL6jKTHzaBVwCU8hic3FP4ZqxJ2QKAQJxjQXdclZTle0m6zYvwq6NKS0/O1AWWyX/vTgeWlP7fSNHmfyai6JXKYSTNPyQ2dyxK/eFvZalTL4="

language: generic

# For CPython macOS builds only, the minimum supported macOS version and
# architectures of any C extensions in the wheel are set with the variable
# MB_PYTHON_OSX_VER: 10.9 (64-bit only) or 10.6 (64/32-bit dual arch). By
# default this is set to the highest available for the Python version selected
# using MB_PYTHON_VERSION. You should only need to set this explicitly if you
# are building a 10.6 dual-arch build for a CPython version where both a 10.9 and
# 10.6 build are available (for example, 2.7 or 3.7).
# All PyPy macOS builds are 64-bit only.

# Required in Linux to invoke `docker` ourselves
services: docker

# Host distribution.  This is the distribution from which we run the build
# and test containers, via docker.
dist: xenial

matrix:
  include:
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.5
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.6
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.7
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.8
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=pypy-7.3
        - PLAT=darwin
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=pypy3-7.3
        - PLAT=darwin
    - os: osx
      env:
        - MB_PYTHON_VERSION=2.7
        - MB_PYTHON_OSX_VER=10.6
        - TEST_DEPENDS="pytest==4.6"
    - os: osx
      env:
        - MB_PYTHON_VERSION=2.7
        - TEST_DEPENDS="pytest==4.6"

    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=pypy-7.3
    - os: linux
      env:
        - MB_PYTHON_VERSION=pypy3-7.3
    - os: linux
      env: 
        - MB_PYTHON_VERSION=2.7
        - TEST_DEPENDS="pytest==4.6"
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - UNICODE_WIDTH=16
        - TEST_DEPENDS="pytest==4.6"
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
        - TEST_DEPENDS="pytest==4.6"
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
        - UNICODE_WIDTH=16
        - TEST_DEPENDS="pytest==4.6"

before_install:
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install:
    # Maybe get and clean and patch source
    - clean_code $REPO_DIR $BUILD_COMMIT
    - find $TRAVIS_BUILD_DIR
    - build_wheel $REPO_DIR $PLAT

script:
    - install_run $PLAT

after_success:
    - if [ "$TRAVIS_OS_NAME" = "osx" ]; then wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh; fi
    - if [ "$TRAVIS_OS_NAME" = "linux" ]; then wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; fi
    - bash miniconda.sh -b -p $HOME/miniconda
    - source "$HOME/miniconda/etc/profile.d/conda.sh"
    - hash -r && conda activate base
    - pip install twine
    # List the wheels
    - ls $TRAVIS_BUILD_DIR/wheelhouse/*.whl

    - >
      if [ "$TRAVIS_BRANCH" == "master" ]; then
        twine upload --verbose --skip-existing $TRAVIS_BUILD_DIR/wheelhouse/*.whl --repository-url https://upload.pypi.org/legacy/ -u __token__ -p $PYPI_PASSWORD;
      else
        echo "Not deploying until on master branch ($TRAVIS_BRANCH)";
      fi
